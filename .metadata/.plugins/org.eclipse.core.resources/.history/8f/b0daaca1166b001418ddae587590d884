package poof.core;

import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;

public abstract class FileSystemEntitiy implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = -5454995429011788081L;
	
	protected String name;
	protected int size;
	protected User owner;
	protected PrivacyMode privacyMode;
	protected EntitiyType entitiyType;
	
	
	public FileSystemEntitiy (String name, User owner) {
		this.name = name;
		this.owner = owner;
		this.privacyMode = PrivacyMode.PRIVATE;
	}
	
	public static FileSystemEntitiy createEntitiy(String dataLine, FileSystem fs) {
		String data[] = dataLine.split("|");
			try {
				ArrayList<String> ctoargs = new ArrayList<String>(data.length-1);
				Class<?> type = Class.forName(data[0]);
				for (int i = 1; i < data.length; i++){
					ctoargs.add(i, data[i]);
					
				String pathEntries[] = data[2].split("/");
				Directory rootDir = fs.getRootDirectory();
				for (int ix = 1; ix < pathEntries.length; ix++){
					if (rootDir.getChild(pathEntries[ix]) == null)
						rootDir.addChild(pathEntries[ix]);
				}
			}
				Constructor<?> ctor = type.getConstructor(String.class, User.class);
				return ctor.newInstance(name, fs.getHomeDirectory());
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} catch (InstantiationException e) {e.printStackTrace(); return null; }
			catch (IllegalAccessException e) {e.printStackTrace(); return null; }
			catch (IllegalArgumentException e) {e.printStackTrace(); return null; }
			catch (InvocationTargetException e) {e.printStackTrace(); return null; }
			catch (NoSuchMethodException e) { e.printStackTrace(); return null; }
			
	}
	
	
	public boolean isCdiable() {
		return entitiyType.equals(EntitiyType.DIRECTORY);
	}

	// Getters
	public String getName() {
		return name;
	}

	public abstract int getSize();

	public User getOwner() {
		return owner;
	}

	public PrivacyMode getPrivacyMode() {
		return privacyMode;
	}
	
	public EntitiyType getentitiyType() {
		return entitiyType;
	}
	
	// Setters
	public void setOwner (User newOwner) {
		this.owner = newOwner;
	}
	
	public void setName(String newName) {
		name = newName;
	}
	
	public void setPrivacyMode(PrivacyMode privacyMode) {
		this.privacyMode = privacyMode;
	}
	
	
	@Override
	public String toString() {
		return toString(this.name);
	}
	
	
	public String toString(String name) {
		// This method allows to print the same entity with different names
		String entitiyStr = "";
		if (privacyMode.equals(PrivacyMode.PRIVATE))
			entitiyStr += "- ";
		else
			entitiyStr += "w ";
		
		entitiyStr += owner.getUsername() + " " + getSize() + " " + name;
			
		return entitiyStr;
	}

	
	
}
